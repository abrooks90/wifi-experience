{"version":3,"sources":["components/headerComponent/header.js","components/footerComponent/footer.js","components/pages/homePage.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","Component","Footer","Homepage","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","response","endpoint","_this2","socketIOClient","on","data","setState","App","openSocket","callBackendAPI","_callee","body","regenerator_default","wrap","_context","prev","next","fetch","sent","json","status","Error","message","abrupt","stop","then","res","express","catch","err","console","log","header","homePage","footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wPAsBeA,mLAlBX,OACEC,EAAAC,EAAAC,cAAA,cACJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAf,QAIAH,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACDF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,mBAXiBC,aCUNC,mLARX,OACHN,EAAAC,EAAAC,cAAA,+BAHoBG,8BCgCNE,cA7Bb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,UAAU,EACVC,SAAU,kCAJAT,mFAQM,IAAAU,EAAAP,KACVM,EAAaN,KAAKI,MAAlBE,SACOE,IAAeF,GACvBG,GAAG,UAAW,SAAAC,GAAI,OAAIH,EAAKI,SAAS,CAAEN,SAAUK,uCAGhD,IACFL,EAAaL,KAAKI,MAAlBC,SAEL,OACFhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACba,EACQhB,EAAAC,EAAAC,cAAA,SACGc,GAEHhB,EAAAC,EAAAC,cAAA,+BAzBWG,aCuCRkB,GArCAC,IAAW,oOAI1BT,MAAQ,CACJM,KAAM,QAUTI,oCAAiB,SAAAC,IAAA,IAAAV,EAAAW,EAAA,OAAAC,EAAA3B,EAAA4B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACSC,MAAM,KADf,cACRjB,EADQc,EAAAI,KAAAJ,EAAAE,KAAA,EAEKhB,EAASmB,OAFd,UAERR,EAFQG,EAAAI,KAIU,MAApBlB,EAASoB,OAJC,CAAAN,EAAAE,KAAA,cAKNK,MAAMV,EAAKW,SALL,cAAAR,EAAAS,OAAA,SAQPZ,GARO,wBAAAG,EAAAU,SAAAd,yFAPG,IAAAR,EAAAP,KAEjBA,KAAKc,iBACFgB,KAAK,SAAAC,GAAG,OAAIxB,EAAKI,SAAS,CAAED,KAAMqB,EAAIC,YACtCC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,sCAe5B,OACE7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACnBH,EAAAC,EAAAC,cAAC8C,EAAD,MACChD,EAAAC,EAAAC,cAAC+C,EAAD,MACDjD,EAAAC,EAAAC,cAACgD,EAAD,cA7BgB7C,cCKE8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.5fdd5819.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header>\n\t\t<div className=\"logo\">\n\t\t\tLOGO\n\t\t</div>\n\t\t\n\t\t<nav>\n\t\t\t<ul>\n\t\t\t  <li>\n\t\t\t\t<a href=\"#\">Home</a>\n\t\t\t  </li>\n\t\t\t</ul>\n\t\t</nav>\n\t  </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nclass Footer extends Component {\n  render() {\n    return (\n\t<footer>\n\tFooter\n\t</footer>\n    );\n  }\n}\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport socketIOClient from \"socket.io-client\";\n\nclass Homepage extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      response: false,\n      endpoint: \"http://192.168.1.10:3001/react\"\n    };\n  }\n  \n  componentDidMount() {\n    const { endpoint } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"FromAPI\", data => this.setState({ response: data }));\n  }\n    \n  render() {\n\tconst { response } = this.state;\n\t\n    return (\n\t\t<div className=\"wrap\">\t\t\t\n\t\t\t{response\n          ? <p>\n              {response}\n            </p>\n          : <p>Loading...</p>}\n\t\t</div>\n    );\n  }\n}\n\nexport default Homepage;\n","import React, { Component } from 'react';\nimport Header from './components/headerComponent/header';\nimport Footer from './components/footerComponent/footer';\nimport Homepage from './components/pages/homePage';\nimport openSocket from 'socket.io-client';\nconst socket = openSocket('http://localhost:3001');\n\nclass App extends Component {\n\nstate = {\n    data: null\n};\n    \n\tcomponentDidMount() {\n      // Call our fetch function below once the component mounts\n    this.callBackendAPI()\n      .then(res => this.setState({ data: res.express }))\n      .catch(err => console.log(err));\n\t}\n    // Fetches our GET route from the Express server. (Note the route we are fetching matches the GET route from server.js\n\tcallBackendAPI = async () => {\n    const response = await fetch('/');\n    const body = await response.json();\n\n    if (response.status !== 200) {\n      throw Error(body.message) \n    }\n\n    return body;\n};\n  \n  render() {\n    return (\n      <div className=\"App\">\n\t\t<Header />\n\t\t\t<Homepage />\n\t\t<Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}